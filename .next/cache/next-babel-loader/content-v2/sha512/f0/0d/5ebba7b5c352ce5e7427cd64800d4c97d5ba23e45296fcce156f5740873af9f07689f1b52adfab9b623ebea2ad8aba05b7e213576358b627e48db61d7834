{"ast":null,"code":"var _jsxFileName = \"/home/hao/Deadline/mhhpm_18_3_final/FE-KTXSHOP-SELLER/component/cropper-v2/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles } from \"@material-ui/core\";\nimport \"cropperjs/dist/cropper.css\";\nimport Cropper from \"react-cropper\";\nimport styles from \"./cropper.module.css\";\nexport const CropperError = {\n  fileTooLarge: \"FILE_TOO_LARGE\"\n};\nconst useStyles = makeStyles({\n  cropper: {\n    maxWidth: \"90vw\",\n    maxHeight: \"calc( 100vh - 256px )\"\n  }\n});\n/**\n * @param {object} props\n * @param {number} props.maxfileSize unit: MB (ex. 2 -> 2MB)\n */\n\nconst ModalCropperV2 = ({\n  open,\n  onClose,\n  callback,\n  title,\n  text,\n  myRef,\n  maxfileSize = 10\n}) => {\n  const style = useStyles();\n  const {\n    0: image,\n    1: setImage\n  } = useState(\"\");\n  const {\n    0: cropper,\n    1: setCropper\n  } = useState(null);\n\n  function handleFile(e) {\n    if (e.target.files && e.target.files.length > 0) {\n      // alert(e.target.files[0].size)\n      const fileReader = new FileReader();\n\n      fileReader.onloadend = () => {\n        setImage(fileReader.result);\n      };\n\n      fileReader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  function getCropData() {\n    if (typeof cropper !== \"undefined\") {\n      const base64 = cropper.getCroppedCanvas().toDataURL();\n      if (base64.length / 1000000 > maxfileSize) throw new Error(CropperError.fileTooLarge);\n      callback(base64);\n    }\n  }\n\n  function handleClose() {\n    setImage(\"\");\n    setCropper(null);\n  }\n\n  function handleBtnClose() {\n    onClose(false);\n    handleClose();\n  }\n\n  function handleBtnAction() {\n    try {\n      getCropData();\n      onClose(false);\n      handleClose();\n    } catch (e) {\n      if (e.message === CropperError.fileTooLarge) {\n        error(\"Kích thước hình ảnh quá lớn\");\n      }\n    }\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Dialog, {\n    open: open,\n    scroll: \"body\",\n    className: styles.croperWidth,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(DialogTitle, {\n    id: \"customized-dialog-title\",\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, title), __jsx(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"upload-photo\",\n    style: {\n      marginBottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, __jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"upload-photo\",\n    onChange: handleFile,\n    name: \"upload-photo\",\n    type: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }), __jsx(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, image == \"\" ? \"Chọn ảnh\" : \"Chọn ảnh khác\"))), __jsx(\"div\", {\n    className: styles.cropperMarginTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, __jsx(Cropper, {\n    className: style.cropper,\n    initialAspectRatio: 1,\n    preview: \".img-preview\",\n    src: image,\n    viewMode: 2,\n    guides: true,\n    minCropBoxHeight: 100,\n    minCropBoxWidth: 100,\n    background: false,\n    responsive: true,\n    autoCropArea: 1,\n    checkOrientation: false,\n    scalable: true,\n    onInitialized: instance => {\n      setCropper(instance);\n    },\n    ref: myRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }))), __jsx(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: handleBtnClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"\\u0110\\xF3ng\"), __jsx(Button, {\n    autoFocus: true,\n    onClick: handleBtnAction,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, text))));\n};\n\nexport default ModalCropperV2;","map":{"version":3,"sources":["/home/hao/Deadline/mhhpm_18_3_final/FE-KTXSHOP-SELLER/component/cropper-v2/index.js"],"names":["React","useState","useRef","useEffect","Button","Dialog","DialogActions","DialogContent","DialogTitle","makeStyles","Cropper","styles","CropperError","fileTooLarge","useStyles","cropper","maxWidth","maxHeight","ModalCropperV2","open","onClose","callback","title","text","myRef","maxfileSize","style","image","setImage","setCropper","handleFile","e","target","files","length","fileReader","FileReader","onloadend","result","readAsDataURL","getCropData","base64","getCroppedCanvas","toDataURL","Error","handleClose","handleBtnClose","handleBtnAction","message","error","croperWidth","marginBottom","display","cropperMarginTop","instance"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    makeStyles,\n} from \"@material-ui/core\";\nimport \"cropperjs/dist/cropper.css\";\nimport Cropper from \"react-cropper\";\nimport styles from \"./cropper.module.css\";\n\nexport const CropperError = {\n    fileTooLarge: \"FILE_TOO_LARGE\",\n};\n\nconst useStyles = makeStyles({\n    cropper: {\n        maxWidth: \"90vw\",\n        maxHeight: \"calc( 100vh - 256px )\",\n    }\n})\n\n/**\n * @param {object} props\n * @param {number} props.maxfileSize unit: MB (ex. 2 -> 2MB)\n */\nconst ModalCropperV2 = ({\n    open,\n    onClose,\n    callback,\n    title,\n    text,\n    myRef,\n    maxfileSize = 10,\n}) => {\n    const style = useStyles();\n    const [image, setImage] = useState(\"\");\n    const [cropper, setCropper] = useState(null);\n\n    function handleFile(e) {\n        if (e.target.files && e.target.files.length > 0) {\n            // alert(e.target.files[0].size)\n            const fileReader = new FileReader();\n            fileReader.onloadend = () => {\n                setImage(fileReader.result);\n            };\n            fileReader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    function getCropData() {\n        if (typeof cropper !== \"undefined\") {\n            const base64 = cropper.getCroppedCanvas().toDataURL();\n            if (base64.length / 1000000 > maxfileSize)\n                throw new Error(CropperError.fileTooLarge);\n            callback(base64);\n        }\n    }\n\n    function handleClose() {\n        setImage(\"\");\n        setCropper(null);\n    }\n\n    function handleBtnClose() {\n        onClose(false);\n        handleClose();\n    }\n\n    function handleBtnAction() {\n        try {\n            getCropData();\n            onClose(false);\n            handleClose();\n        } catch (e) {\n            if (e.message === CropperError.fileTooLarge) {\n                error(\"Kích thước hình ảnh quá lớn\");\n            }\n        }\n    }\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                scroll=\"body\"\n                className={styles.croperWidth}\n                fullWidth={true}\n            >\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    {title}\n                </DialogTitle>\n                <DialogContent dividers>\n                    <label htmlFor=\"upload-photo\" style={{ marginBottom: 5 }}>\n                        <input\n                            style={{ display: \"none\" }}\n                            id=\"upload-photo\"\n                            onChange={handleFile}\n                            name=\"upload-photo\"\n                            type=\"file\"\n                        />\n                        <Button\n                            color=\"secondary\"\n                            variant=\"contained\"\n                            component=\"span\"\n                        >\n                            <span>\n                                {image == \"\" ? \"Chọn ảnh\" : \"Chọn ảnh khác\"}\n                            </span>\n                        </Button>\n                    </label>\n\n                    <div className={styles.cropperMarginTop}>\n                        <Cropper\n                            className={style.cropper}\n                            initialAspectRatio={1}\n                            preview=\".img-preview\"\n                            src={image}\n                            viewMode={2}\n                            guides={true}\n                            minCropBoxHeight={100}\n                            minCropBoxWidth={100}\n                            background={false}\n                            responsive={true}\n                            autoCropArea={1}\n                            checkOrientation={false}\n                            scalable={true}\n                            onInitialized={(instance) => {\n                                setCropper(instance);\n                            }}\n                            ref={myRef}\n                        />\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleBtnClose}>Đóng</Button>\n                    <Button autoFocus onClick={handleBtnAction} color=\"primary\">\n                        {text}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default ModalCropperV2;\n"]},"metadata":{},"sourceType":"module"}