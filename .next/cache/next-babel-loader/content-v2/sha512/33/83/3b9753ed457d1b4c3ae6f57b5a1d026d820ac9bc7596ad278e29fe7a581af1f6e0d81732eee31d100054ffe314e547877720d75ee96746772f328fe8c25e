{"ast":null,"code":"var _jsxFileName = \"/home/hao/Deadline/mhhpm_18_3_final/FE-KTXSHOP-SELLER/component/editor/rich-text-field/index.js\";\nvar __jsx = React.createElement;\nimport { createStyles } from \"@material-ui/core\";\nimport { ContentState, convertFromHTML, EditorState } from \"draft-js\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport dynamic from \"next/dynamic\";\nimport React, { useEffect, useState } from 'react';\nimport LabelBox from '../label-box';\nconst Editor = dynamic(() => import('react-draft-wysiwyg').then(mod => mod.Editor), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-draft-wysiwyg')],\n    modules: ['react-draft-wysiwyg']\n  }\n});\nconst defaultOptions = ['inline', 'list', 'textAlign', 'colorPicker'];\n\nconst defaultOnValueChange = (value = \"\") => {};\n\nconst defaultSetValue = (name = '', value = '') => {};\n\nconst styles = createStyles({\n  editor: {\n    padding: \"0 8px\",\n    minHeight: \"6rem\"\n  }\n});\n/**\n * @callback getValueType\n * @param {string} name - name of field\n * @callback setValueType\n * @param {string} name - name of field\n * @param {*} value - value to set to form\n * @returns {void}\n */\n\n/**\n * @description This is a rich text editor component.\n * @param {[string]} options array of toolbar options\n * @param {string} label field label\n * @param {string} name name of form value\n * @param {setValueType} setValue function to get field value.\n * @param {getValueType} getValue function to get field value.\n * @example How to use `import RichTextField from \"@thuocsi/nextjs-components/editor/rich-text-field/index\";import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";`\n */\n\nexport default function RichTextField({\n  options = defaultOptions,\n  onValueChange = defaultOnValueChange,\n  setValue = defaultSetValue,\n  label,\n  name = '',\n  getValue\n}) {\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const {\n    0: editorState,\n    1: setEditorState\n  } = useState(EditorState.createEmpty());\n  useEffect(() => {\n    const value = getValue(name);\n    const blocksFromHTML = convertFromHTML(value !== null && value !== void 0 ? value : '<p></p>');\n    const contentState = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n    setEditorState(EditorState.createWithContent(contentState));\n  }, [getValue(name)]);\n  return __jsx(LabelBox, {\n    focused: focused,\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(Editor, {\n    editorStyle: styles.editor,\n    toolbar: {\n      options,\n      inline: {\n        options: ['bold', 'italic', 'underline', 'strikethrough']\n      }\n    },\n    toolbarHidden: !focused,\n    editorState: editorState,\n    onEditorStateChange: setEditorState,\n    onFocus: () => setFocused(true),\n    onBlur: () => {\n      setFocused(false);\n      const htmlString = stateToHTML(editorState.getCurrentContent());\n      setValue(name, htmlString);\n      onValueChange(htmlString);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/home/hao/Deadline/mhhpm_18_3_final/FE-KTXSHOP-SELLER/component/editor/rich-text-field/index.js"],"names":["createStyles","ContentState","convertFromHTML","EditorState","stateToHTML","dynamic","React","useEffect","useState","LabelBox","Editor","then","mod","ssr","defaultOptions","defaultOnValueChange","value","defaultSetValue","name","styles","editor","padding","minHeight","RichTextField","options","onValueChange","setValue","label","getValue","focused","setFocused","editorState","setEditorState","createEmpty","blocksFromHTML","contentState","createFromBlockArray","contentBlocks","entityMap","createWithContent","inline","htmlString","getCurrentContent"],"mappings":"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","sourcesContent":["import { createStyles } from \"@material-ui/core\";\nimport { ContentState, convertFromHTML, EditorState } from \"draft-js\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport dynamic from \"next/dynamic\";\nimport React, { useEffect, useState } from 'react';\nimport LabelBox from '../label-box';\nconst Editor = dynamic(() => import('react-draft-wysiwyg').then(mod => mod.Editor), { ssr: false });\n\nconst defaultOptions = ['inline', 'list', 'textAlign', 'colorPicker'];\nconst defaultOnValueChange = (value = \"\") => { };\nconst defaultSetValue = (name = '', value = '') => { };\n\nconst styles = createStyles({\n    editor: {\n        padding: \"0 8px\",\n        minHeight: \"6rem\",\n    }\n})\n/**\n * @callback getValueType\n * @param {string} name - name of field\n * @callback setValueType\n * @param {string} name - name of field\n * @param {*} value - value to set to form\n * @returns {void}\n */\n/**\n * @description This is a rich text editor component.\n * @param {[string]} options array of toolbar options\n * @param {string} label field label\n * @param {string} name name of form value\n * @param {setValueType} setValue function to get field value.\n * @param {getValueType} getValue function to get field value.\n * @example How to use `import RichTextField from \"@thuocsi/nextjs-components/editor/rich-text-field/index\";import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";`\n */\nexport default function RichTextField({\n    options = defaultOptions,\n    onValueChange = defaultOnValueChange,\n    setValue = defaultSetValue,\n    label,\n    name = '',\n    getValue,\n}) {\n    const [focused, setFocused] = useState(false);\n    const [editorState, setEditorState] = useState(EditorState.createEmpty())\n\n    useEffect(() => {\n        const value = getValue(name);\n        const blocksFromHTML = convertFromHTML(value ?? '<p></p>');\n        const contentState = ContentState.createFromBlockArray(\n            blocksFromHTML.contentBlocks,\n            blocksFromHTML.entityMap,\n        )\n        setEditorState(EditorState.createWithContent(contentState))\n\n    }, [getValue(name)])\n    return (\n        <LabelBox focused={focused} label={label}>\n            <Editor\n                editorStyle={styles.editor}\n                toolbar={{\n                    options,\n                    inline: {\n                        options: ['bold', 'italic', 'underline', 'strikethrough'],\n                    }\n                }}\n                toolbarHidden={!focused}\n                editorState={editorState}\n                onEditorStateChange={setEditorState}\n                onFocus={() => setFocused(true)}\n                onBlur={() => {\n                    setFocused(false);\n                    const htmlString = stateToHTML(editorState.getCurrentContent());\n                    setValue(name, htmlString);\n                    onValueChange(htmlString);\n                }}\n            />\n        </LabelBox>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}