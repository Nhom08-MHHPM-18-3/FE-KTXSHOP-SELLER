{"ast":null,"code":"import moment from \"moment\";\nexport function formatNumber(num) {\n  return num === null || num === void 0 ? void 0 : num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\nexport function formatEllipsisText(text, len = 100) {\n  if (text) {\n    if (text.length > 50) {\n      return text.substring(0, len) + \"...\";\n    }\n\n    return text;\n  }\n\n  return '-';\n}\nexport function formatMessageError(code) {\n  return `${ErrorCode[code]}`;\n}\nexport const fnValidateTextDefault = txt => {\n  let str = txt === null || txt === void 0 ? void 0 : txt.toString().trim();\n\n  if (str.length < 6 || str.length > 250) {\n    return \"Vui lòng không nhập dư khoảng trắng\";\n  }\n\n  return null;\n};\nexport const fnReplaceMultipleSpaceToSingleSpace = obj => {\n  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, typeof v == 'string' ? v === null || v === void 0 ? void 0 : v.toString().trim().replace(/\\s+/g, ' ') : v]));\n};\nexport function formatTime(timeFormat, utcOffset = '+0700', type = \"DD-MM-YYYY HH:mm:ss\") {\n  return moment(timeFormat).utcOffset(utcOffset).format(type);\n}\nexport function trimSpace(str) {\n  return str.trim().replace(/\\s+/g, ' ');\n}\nexport const LevelRegios = [{\n  label: 'Trung ương',\n  value: 'Trung ương'\n}];\nexport function formatUrlSearch(str) {\n  return str.trim().replace(/\\s+/g, ' ').replace(/[&]/, '%26').replace(/[+]/, '%2B').replace(/[#]/, '%23');\n}","map":{"version":3,"sources":["/home/hao/Deadline/mhhpm_18_3_final/FE-KTXSHOP-SELLER/utils/func.js"],"names":["moment","formatNumber","num","toString","replace","formatEllipsisText","text","len","length","substring","formatMessageError","code","ErrorCode","fnValidateTextDefault","txt","str","trim","fnReplaceMultipleSpaceToSingleSpace","obj","Object","fromEntries","entries","map","k","v","formatTime","timeFormat","utcOffset","type","format","trimSpace","LevelRegios","label","value","formatUrlSearch"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AAChC,SAAOA,GAAP,aAAOA,GAAP,uBAAOA,GAAG,CAAEC,QAAL,GAAgBC,OAAhB,CAAwB,yBAAxB,EAAmD,KAAnD,CAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAG,GAAG,GAAxC,EAA6C;AAClD,MAAID,IAAJ,EAAU;AACR,QAAIA,IAAI,CAACE,MAAL,GAAc,EAAlB,EAAsB;AACpB,aAAOF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBF,GAAlB,IAAyB,KAAhC;AACD;;AACD,WAAOD,IAAP;AACD;;AACD,SAAO,GAAP;AACD;AAED,OAAO,SAASI,kBAAT,CAA4BC,IAA5B,EAAkC;AACvC,SAAQ,GAAEC,SAAS,CAACD,IAAD,CAAO,EAA1B;AACD;AAED,OAAO,MAAME,qBAAqB,GAAIC,GAAD,IAAS;AAC5C,MAAIC,GAAG,GAAGD,GAAH,aAAGA,GAAH,uBAAGA,GAAG,CAAEX,QAAL,GAAgBa,IAAhB,EAAV;;AACA,MAAID,GAAG,CAACP,MAAJ,GAAa,CAAb,IAAkBO,GAAG,CAACP,MAAJ,GAAa,GAAnC,EAAwC;AACtC,WAAO,qCAAP;AACD;;AACD,SAAO,IAAP;AACD,CANM;AAQP,OAAO,MAAMS,mCAAmC,GAAIC,GAAD,IAAS;AAC1D,SAAOC,MAAM,CAACC,WAAP,CACLD,MAAM,CAACE,OAAP,CAAeH,GAAf,EAAoBI,GAApB,CAAwB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY,CAClCD,CADkC,EAC/B,OAAOC,CAAP,IAAY,QAAZ,GAAuBA,CAAvB,aAAuBA,CAAvB,uBAAuBA,CAAC,CAAErB,QAAH,GAAca,IAAd,GAAqBZ,OAArB,CAA6B,MAA7B,EAAqC,GAArC,CAAvB,GAAmEoB,CADpC,CAApC,CADK,CAAP;AAKD,CANM;AASP,OAAO,SAASC,UAAT,CAAoBC,UAApB,EAAgCC,SAAS,GAAG,OAA5C,EAAqDC,IAAI,GAAG,qBAA5D,EAAmF;AACxF,SAAO5B,MAAM,CAAC0B,UAAD,CAAN,CAAmBC,SAAnB,CAA6BA,SAA7B,EAAwCE,MAAxC,CAA+CD,IAA/C,CAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBf,GAAnB,EAAwB;AAC7B,SAAOA,GAAG,CAACC,IAAJ,GAAWZ,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,CAAP;AACD;AAED,OAAO,MAAM2B,WAAW,GAAG,CAAC;AAC1BC,EAAAA,KAAK,EAAE,YADmB;AAE1BC,EAAAA,KAAK,EAAE;AAFmB,CAAD,CAApB;AAKP,OAAO,SAASC,eAAT,CAAyBnB,GAAzB,EAA8B;AACnC,SAAOA,GAAG,CAACC,IAAJ,GAAWZ,OAAX,CAAmB,MAAnB,EAA2B,GAA3B,EACJA,OADI,CACI,KADJ,EACW,KADX,EAEJA,OAFI,CAEI,KAFJ,EAEW,KAFX,EAGJA,OAHI,CAGI,KAHJ,EAGW,KAHX,CAAP;AAID","sourcesContent":["import moment from \"moment\";\n\nexport function formatNumber(num) {\n  return num?.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n}\n\nexport function formatEllipsisText(text, len = 100) {\n  if (text) {\n    if (text.length > 50) {\n      return text.substring(0, len) + \"...\"\n    }\n    return text\n  }\n  return '-'\n}\n\nexport function formatMessageError(code) {\n  return `${ErrorCode[code]}`\n}\n\nexport const fnValidateTextDefault = (txt) => {\n  let str = txt?.toString().trim()\n  if (str.length < 6 || str.length > 250) {\n    return \"Vui lòng không nhập dư khoảng trắng\"\n  }\n  return null\n}\n\nexport const fnReplaceMultipleSpaceToSingleSpace = (obj) => {\n  return Object.fromEntries(\n    Object.entries(obj).map(([k, v]) => [\n      k, typeof v == 'string' ? v?.toString().trim().replace(/\\s+/g, ' ') : v\n    ])\n  )\n}\n\n\nexport function formatTime(timeFormat, utcOffset = '+0700', type = \"DD-MM-YYYY HH:mm:ss\") {\n  return moment(timeFormat).utcOffset(utcOffset).format(type)\n}\n\nexport function trimSpace(str) {\n  return str.trim().replace(/\\s+/g, ' ')\n}\n\nexport const LevelRegios = [{\n  label: 'Trung ương',\n  value: 'Trung ương'\n}]\n\nexport function formatUrlSearch(str) {\n  return str.trim().replace(/\\s+/g, ' ')\n    .replace(/[&]/, '%26')\n    .replace(/[+]/, '%2B')\n    .replace(/[#]/, '%23');\n}\n"]},"metadata":{},"sourceType":"module"}