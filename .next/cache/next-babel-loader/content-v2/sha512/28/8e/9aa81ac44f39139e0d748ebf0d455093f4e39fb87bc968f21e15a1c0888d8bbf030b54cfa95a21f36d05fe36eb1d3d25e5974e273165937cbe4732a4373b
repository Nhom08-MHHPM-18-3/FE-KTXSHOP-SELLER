{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learning\\\\Learning\\\\HKI_NamTu\\\\MoHinhHoaPhanMem\\\\KTXSHOP\\\\Source\\\\FE-KTXSHOP-SELLER\\\\component\\\\cropper-v2\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles } from \"@material-ui/core\";\nimport \"cropperjs/dist/cropper.css\";\nimport Cropper from \"react-cropper\";\nimport styles from \"./cropper.module.css\";\nexport var CropperError = {\n  fileTooLarge: \"FILE_TOO_LARGE\"\n};\nvar useStyles = makeStyles({\n  cropper: {\n    maxWidth: \"90vw\",\n    maxHeight: \"calc( 100vh - 256px )\"\n  }\n});\n/**\r\n * @param {object} props\r\n * @param {number} props.maxfileSize unit: MB (ex. 2 -> 2MB)\r\n */\n\nvar ModalCropperV2 = function ModalCropperV2(_ref) {\n  _s();\n\n  var open = _ref.open,\n      onClose = _ref.onClose,\n      callback = _ref.callback,\n      title = _ref.title,\n      text = _ref.text,\n      myRef = _ref.myRef,\n      _ref$maxfileSize = _ref.maxfileSize,\n      maxfileSize = _ref$maxfileSize === void 0 ? 10 : _ref$maxfileSize;\n  var style = useStyles();\n\n  var _useState = useState(\"\"),\n      image = _useState[0],\n      setImage = _useState[1];\n\n  var _useState2 = useState(null),\n      cropper = _useState2[0],\n      setCropper = _useState2[1];\n\n  function handleFile(e) {\n    if (e.target.files && e.target.files.length > 0) {\n      // alert(e.target.files[0].size)\n      var fileReader = new FileReader();\n\n      fileReader.onloadend = function () {\n        setImage(fileReader.result);\n      };\n\n      fileReader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  function getCropData() {\n    if (typeof cropper !== \"undefined\") {\n      var base64 = cropper.getCroppedCanvas().toDataURL();\n      if (base64.length / 1000000 > maxfileSize) throw new Error(CropperError.fileTooLarge);\n      callback(base64);\n    }\n  }\n\n  function handleClose() {\n    setImage(\"\");\n    setCropper(null);\n  }\n\n  function handleBtnClose() {\n    onClose(false);\n    handleClose();\n  }\n\n  function handleBtnAction() {\n    try {\n      getCropData();\n      onClose(false);\n      handleClose();\n    } catch (e) {\n      if (e.message === CropperError.fileTooLarge) {\n        error(\"Kích thước hình ảnh quá lớn\");\n      }\n    }\n  }\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Dialog, {\n    open: open,\n    scroll: \"body\",\n    className: styles.croperWidth,\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(DialogTitle, {\n    id: \"customized-dialog-title\",\n    onClose: handleClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, title), __jsx(DialogContent, {\n    dividers: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"upload-photo\",\n    style: {\n      marginBottom: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, __jsx(\"input\", {\n    style: {\n      display: \"none\"\n    },\n    id: \"upload-photo\",\n    onChange: handleFile,\n    name: \"upload-photo\",\n    type: \"file\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }), __jsx(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    component: \"span\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 29\n    }\n  }, image == \"\" ? \"Chọn ảnh\" : \"Chọn ảnh khác\"))), __jsx(\"div\", {\n    className: styles.cropperMarginTop,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, __jsx(Cropper, {\n    className: style.cropper,\n    initialAspectRatio: 1,\n    preview: \".img-preview\",\n    src: image,\n    viewMode: 2,\n    guides: true,\n    minCropBoxHeight: 100,\n    minCropBoxWidth: 100,\n    background: false,\n    responsive: true,\n    autoCropArea: 1,\n    checkOrientation: false,\n    scalable: true,\n    onInitialized: function onInitialized(instance) {\n      setCropper(instance);\n    },\n    ref: myRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }))), __jsx(DialogActions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: handleBtnClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, \"\\u0110\\xF3ng\"), __jsx(Button, {\n    autoFocus: true,\n    onClick: handleBtnAction,\n    color: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, text))));\n};\n\n_s(ModalCropperV2, \"R9G/LgdEiMXCMDI6DgM2ZTnjS38=\", false, function () {\n  return [useStyles];\n});\n\n_c = ModalCropperV2;\nexport default ModalCropperV2;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalCropperV2\");","map":{"version":3,"sources":["D:/Learning/Learning/HKI_NamTu/MoHinhHoaPhanMem/KTXSHOP/Source/FE-KTXSHOP-SELLER/component/cropper-v2/index.js"],"names":["React","useState","useRef","useEffect","Button","Dialog","DialogActions","DialogContent","DialogTitle","makeStyles","Cropper","styles","CropperError","fileTooLarge","useStyles","cropper","maxWidth","maxHeight","ModalCropperV2","open","onClose","callback","title","text","myRef","maxfileSize","style","image","setImage","setCropper","handleFile","e","target","files","length","fileReader","FileReader","onloadend","result","readAsDataURL","getCropData","base64","getCroppedCanvas","toDataURL","Error","handleClose","handleBtnClose","handleBtnAction","message","error","croperWidth","marginBottom","display","cropperMarginTop","instance"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport \"cropperjs/dist/cropper.css\";\r\nimport Cropper from \"react-cropper\";\r\nimport styles from \"./cropper.module.css\";\r\n\r\nexport const CropperError = {\r\n    fileTooLarge: \"FILE_TOO_LARGE\",\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    cropper: {\r\n        maxWidth: \"90vw\",\r\n        maxHeight: \"calc( 100vh - 256px )\",\r\n    }\r\n})\r\n\r\n/**\r\n * @param {object} props\r\n * @param {number} props.maxfileSize unit: MB (ex. 2 -> 2MB)\r\n */\r\nconst ModalCropperV2 = ({\r\n    open,\r\n    onClose,\r\n    callback,\r\n    title,\r\n    text,\r\n    myRef,\r\n    maxfileSize = 10,\r\n}) => {\r\n    const style = useStyles();\r\n    const [image, setImage] = useState(\"\");\r\n    const [cropper, setCropper] = useState(null);\r\n\r\n    function handleFile(e) {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            // alert(e.target.files[0].size)\r\n            const fileReader = new FileReader();\r\n            fileReader.onloadend = () => {\r\n                setImage(fileReader.result);\r\n            };\r\n            fileReader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    function getCropData() {\r\n        if (typeof cropper !== \"undefined\") {\r\n            const base64 = cropper.getCroppedCanvas().toDataURL();\r\n            if (base64.length / 1000000 > maxfileSize)\r\n                throw new Error(CropperError.fileTooLarge);\r\n            callback(base64);\r\n        }\r\n    }\r\n\r\n    function handleClose() {\r\n        setImage(\"\");\r\n        setCropper(null);\r\n    }\r\n\r\n    function handleBtnClose() {\r\n        onClose(false);\r\n        handleClose();\r\n    }\r\n\r\n    function handleBtnAction() {\r\n        try {\r\n            getCropData();\r\n            onClose(false);\r\n            handleClose();\r\n        } catch (e) {\r\n            if (e.message === CropperError.fileTooLarge) {\r\n                error(\"Kích thước hình ảnh quá lớn\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                scroll=\"body\"\r\n                className={styles.croperWidth}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    {title}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <label htmlFor=\"upload-photo\" style={{ marginBottom: 5 }}>\r\n                        <input\r\n                            style={{ display: \"none\" }}\r\n                            id=\"upload-photo\"\r\n                            onChange={handleFile}\r\n                            name=\"upload-photo\"\r\n                            type=\"file\"\r\n                        />\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            variant=\"contained\"\r\n                            component=\"span\"\r\n                        >\r\n                            <span>\r\n                                {image == \"\" ? \"Chọn ảnh\" : \"Chọn ảnh khác\"}\r\n                            </span>\r\n                        </Button>\r\n                    </label>\r\n\r\n                    <div className={styles.cropperMarginTop}>\r\n                        <Cropper\r\n                            className={style.cropper}\r\n                            initialAspectRatio={1}\r\n                            preview=\".img-preview\"\r\n                            src={image}\r\n                            viewMode={2}\r\n                            guides={true}\r\n                            minCropBoxHeight={100}\r\n                            minCropBoxWidth={100}\r\n                            background={false}\r\n                            responsive={true}\r\n                            autoCropArea={1}\r\n                            checkOrientation={false}\r\n                            scalable={true}\r\n                            onInitialized={(instance) => {\r\n                                setCropper(instance);\r\n                            }}\r\n                            ref={myRef}\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleBtnClose}>Đóng</Button>\r\n                    <Button autoFocus onClick={handleBtnAction} color=\"primary\">\r\n                        {text}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalCropperV2;\r\n"]},"metadata":{},"sourceType":"module"}